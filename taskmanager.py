# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LpRmin_YyBxKXCWY40AhnSCjjrznyGb0
"""

import streamlit as st
import pandas as pd
from pymongo import MongoClient
from datetime import datetime
import bcrypt
import matplotlib.pyplot as plt

# MongoDB configuration - update with your connection details or use Streamlit secrets
MONGO_URI = st.secrets["mongo_DB"]  # Change to your MongoDB URI
DB_NAME = "tasktracker"
USERS_COLLECTION = "users"
TASKS_COLLECTION = "tasks"

# Initialize MongoDB connection
@st.cache_resource
def get_db():
    client = MongoClient(MONGO_URI)
    return client[DB_NAME]

# Authentication check
def login_user(username):
    db = get_db()
    user = db[USERS_COLLECTION].find_one({"username": username})
    return user

def verify_password(plain_password, hashed_password):
    return bcrypt.checkpw(plain_password.encode('utf-8'), hashed_password.encode('utf-8'))


def fetch_tasks(section=None, assigned_to=None):
    db = get_db()
    query = {}
    if section:
        query["section"] = section
    if assigned_to:
        query["assigned_to"] = assigned_to
    tasks = list(db[TASKS_COLLECTION].find(query))
    return tasks

def update_task(task_id, status, remark):
    db = get_db()
    db[TASKS_COLLECTION].update_one(
        {"_id": task_id},
        {"$set": {
            "status": status,
            "remark": remark,
            "last_update": datetime.now().strftime("%Y-%m-%d")
        }}
    )

def insert_task(section, description, assigned_to):
    db = get_db()
    db[TASKS_COLLECTION].insert_one({
        "section": section,
        "description": description,
        "status": "Pending",
        "remark": "",
        "last_update": datetime.now().strftime("%Y-%m-%d"),
        "assigned_date": datetime.now().strftime("%Y-%m-%d"),
        "assigned_to": assigned_to
    })

# UI Styling
st.set_page_config("Task Tracker Dashboard", layout="wide", page_icon="ðŸ“‹")
st.markdown("""
    <style>
        .big-font { font-size:22px !important; font-weight: bold; }
        [data-testid="stForm"] { background: #f7fafc; border-radius: 8px; padding: 2rem; }
    </style>
    """, unsafe_allow_html=True)

# Login Interface
st.sidebar.header("Login")
username = st.sidebar.text_input("Username", key = "login_username", value=st.session_state.get("login_username", ""))
password = st.sidebar.text_input("Password", type="password", key = "login_password", value=st.session_state.get("login_password", ""))


if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

def on_login():
    user = login_user(username)
    if user and verify_password(st.session_state.login_password, user["password"]):
        st.session_state.logged_in = True
        st.session_state.username = user["username"]
        st.session_state.role = user["role"]
        st.sidebar.success(f"Welcome, {user['username']}")
        
        # Clear inputs immediately in session state
        st.session_state.login_username = ""
        st.session_state.login_password = ""
    else:
        st.sidebar.error("Incorrect credentials!")

# Inputs with keys

# Login button with callback, not just boolean check
login_btn = st.sidebar.button("Login", on_click=on_login)

# Logout logic as before, can call st.experimental_rerun() to refresh UI


def logout_callback():
    st.session_state.logged_in = False
    st.session_state.username = None
    st.session_state.role = None

    # Reset inputs before rerun
    st.session_state.login_username = ""
    st.session_state.login_password = ""

# Logout button with callback
if st.session_state.get("logged_in"):
    if st.sidebar.button("Logout", on_click=logout_callback):
        st.rerun()


# Main App workflow
if st.session_state.get("logged_in"):
    st.markdown('<span class="big-font">ðŸ“‹ Task Tracker Dashboard</span>', unsafe_allow_html=True)

    db = get_db()

    if st.session_state.role == "officer":
        tab1, tab2 = st.tabs(["Task Assignment", "Dashboard"])
        with tab1:
            st.subheader("Allot a New Task")
            ic_list = [user["username"] for user in db[USERS_COLLECTION].find({"role": "section_ic"})]
            with st.form(key="allot_task_form"):
                section = st.text_input("Coy. Name")
                description = st.text_area("Task Description")
                assigned_to = st.selectbox("Assign To (Username)", ic_list)
                submit = st.form_submit_button("Allot Task")
                if submit:
                    insert_task(section, description, assigned_to)
                    st.markdown('<p style="color: green; font-weight: bold;">Task allotted successfully!</p>',
                                unsafe_allow_html=True)

        with tab2:
            st.subheader("All Section Tasks: Oversight Dashboard")
            tasks = fetch_tasks()
            if tasks:
                dff = pd.DataFrame(tasks)
                if "_id" in dff.columns:
                    dff = dff.drop(columns=["_id"])
                st.dataframe(dff.style.applymap(
                    lambda v: 'color: green' if v == 'Completed' else
                    ('color: red' if v == 'Pending' else ''),
                    subset=['status']
                ))
            else:
                st.info("No tasks found.")

        
        
        
    elif st.session_state.role == "section_ic":
        st.subheader("Your Section's Tasks")
        tasks = fetch_tasks(assigned_to=st.session_state.username)
        status_order = {"Pending": 0, "Completed": 1}
        tasks_sorted = sorted(tasks, key=lambda task: status_order.get(task['status'], 99))
        if tasks_sorted:
            for task in tasks_sorted:
                with st.form(key=f"form_{task['_id']}"):
                    st.markdown(f'<h6 style="color:black;">Assigned Task : {task["description"]}</h6>', unsafe_allow_html=True)
                    st.markdown(f'<h6 style="color:black;">Coy. name : {task["section"]}</h6>', unsafe_allow_html=True)
                    st.markdown(f'<h6 style="color:black;">Assigned Date : {task.get("assigned_date", "-")}</h6>', unsafe_allow_html=True)
                    st.markdown(f'<h6 style="color:black;">Last Updated on : {task.get('last_update', '-')}</h6>', unsafe_allow_html=True)
                    st.markdown(f'<h6 style="color:black;">Task Status : {task['status']}</h6>', unsafe_allow_html=True)
                    st.markdown(f'<h6 style="color:black;">Last Remark : {task.get('remark', '')}</h6>', unsafe_allow_html=True)
                    new_status = st.selectbox(
                        "Change Status",
                        ["Pending", "Completed"],
                        index=["Pending", "Completed"].index(task['status'])
                    )
                    new_remark = st.text_area("Add/Update Remark", value=task.get('remark', ''))
                    submitted = st.form_submit_button("Update Status")
                    if submitted:
                        update_task(task["_id"], new_status, new_remark)
                        st.markdown('<p style="color: green; font-weight: bold;">Status and remark updated!</p>',
                                    unsafe_allow_html=True)
                        
        else:
            st.info("No tasks assigned to you.")

    else:
        st.warning("Unknown role!")

else:
    st.markdown("#### Please login in the sidebar to access the Task Tracker.")

